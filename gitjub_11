import numpy as np
import matplotlib.pyplot as plt

print("=== KLINKENBERG EFFECT ANALYSIS ===")

# Example:
# Pm = 15.0
# Kg = 28.0
# Initial Kl = 20.0
mean_pressure = float(input("Enter mean pressure (Pm): "))  # e.g., 15.0
gas_perm = float(input("Enter gas permeability (Kg): "))    # e.g., 28.0
guess_liquid_perm = float(input("Enter initial guess for liquid permeability (Kl): "))  # e.g., 20.0

def klinkenberg_function(Kl, Pm, Kg):
    return 6.9 * Kl**0.64 + Pm * Kl - Pm * Kg

def klinkenberg_derivative(Kl, Pm):
    return 4.416 * Kl**(-0.36) + Pm

# Newton-Raphson iteration
Kl = guess_liquid_perm
tolerance = 1e-7
iteration = 0

while abs(klinkenberg_function(Kl, mean_pressure, gas_perm)) > tolerance:
    Kl = Kl - (klinkenberg_function(Kl, mean_pressure, gas_perm) / klinkenberg_derivative(Kl, mean_pressure))
    iteration += 1

print(f"\nEstimated Liquid Permeability (Kl): {Kl:.4f} after {iteration} iterations")

# Compare with lab value
lab_Kl = float(input("Enter lab-measured liquid permeability (Klo): "))  # e.g., 22.5
difference = Kl - lab_Kl
print(f"Difference from lab value: {difference:.4f}")

# Calculate b constant
b = 6.9 * Kl**(-0.36)

# Plotting
inv_Pm = np.linspace(0.01, 1.0, 100)
Kog = Kl + b * Kl * inv_Pm

plt.figure(figsize=(10, 6))
plt.plot(inv_Pm, Kog, label="Kog = Kl + b*Kl*(1/Pm)", color='blue')
plt.plot(inv_Pm, np.full_like(inv_Pm, Kl), label="Klo = Kl (constant)", color='green')
plt.plot([inv_Pm[-1], 0], [Kog[-1], Kl], 'r--', label="Extrapolated intercept")

plt.title("Klinkenberg Effect: Gas Slippage Correction Curve")
plt.xlabel("1 / Mean Pressure (1/Pm)")
plt.ylabel("Permeability")
plt.grid(True)
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.legend()
plt.show()